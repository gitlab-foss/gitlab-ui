stages:
  - pre-build
  - test
  - build
  - deploy
  - publish
  - manual

default:
  artifacts:
    expire_in: 30 days
  tags:
    - gitlab-org

variables:
  PUPPETEER_VERSION: '5.2.1'
  PUPPETEER_IMAGE: $CI_REGISTRY_IMAGE/puppeteer:$PUPPETEER_VERSION
  DANGER_GITLAB_API_TOKEN: $GITLAB_TOKEN
  # We want to utilize the faster SAST and Dependency Scanning which are not docker in docker
  SAST_DISABLE_DIND: 'true'
  DS_DISABLE_DIND: 'true'
  # We only need javascript scanning, unfortunately our Danger code would lead to execution of ruby analysis as well
  SAST_DEFAULT_ANALYZERS: 'nodejs-scan, eslint'
  DS_DEFAULT_ANALYZERS: 'retire.js, gemnasium'

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml
  - project: 'gitlab-org/frontend/frontend-build-images'
    file: '/semantic-release/.gitlab-ci-template.yml'

# Ensure that the scanning is only executed on MRs and master
# This potentially can be made obsolete once:
# https://gitlab.com/gitlab-org/gitlab/-/issues/217668 lands
.secure-jobs-config: &secure-jobs-config
  needs: []
  rules:
    - when: always

retire-js-dependency_scanning:
  <<: *secure-jobs-config

gemnasium-dependency_scanning:
  <<: *secure-jobs-config

code_quality:
  <<: *secure-jobs-config
  tags:
    - gitlab-org-docker

license_scanning:
  <<: *secure-jobs-config

eslint-sast:
  <<: *secure-jobs-config

nodejs-scan-sast:
  <<: *secure-jobs-config

secret_detection:
  <<: *secure-jobs-config

container_scanning:
  variables:
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/puppeteer
    CI_APPLICATION_TAG: $PUPPETEER_VERSION
  needs: ['build_docker_image']
  rules:
    - when: always

.puppeteer:
  image: $PUPPETEER_IMAGE
  needs: ['build_docker_image']

.node:
  image: node:12
  variables:
    PUPPETEER_SKIP_DOWNLOAD: 'true'

# This is a cache template for caching node_modules
# As a cache key we are using a SHA of .gitlab-ci.yml and yarn.lock
# The latter is obvious, because it updates when we update dependencies
# The former is to invalidate caches, in case we touch our CI config, which
# could mean changing something in our caching logic
.cache-template: &cache-template
  paths:
    - node_modules/
  key:
    files:
      - .gitlab-ci.yml
      - yarn.lock
    prefix: node_modules

.yarn_install:
  before_script:
    - yarn install --frozen-lockfile
  cache:
    <<: *cache-template
    policy: pull

# Only start pipelines on Merge Requests or master
workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      when: always
    - if: $CI_MERGE_REQUEST_IID
      when: always
    - when: never

# Only run on merge requests that come from GitLab UI.
.if-mr-from-gitlab-ui: &if-mr-from-gitlab-ui
  if: '$CI_MERGE_REQUEST_IID && $CI_MERGE_REQUEST_PROJECT_PATH =~ /gitlab-org\\/gitlab-ui/'

build_docker_image:
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
  tags:
    - gitlab-org-docker
  services:
    - docker:19.03.13-dind
  image: docker:stable
  stage: pre-build
  script:
    - 'mkdir -p ~/.docker'
    - >
      echo '{"experimental": "enabled"}' > ~/.docker/config.json
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - ./bin/build-docker.sh

# As we are caching based on the contents of our CI config and dependency lock file
# We only need to execute when these change. However, we give a manual job as an escape hatch
populate_npm_cache:
  extends: [.node, .yarn_install]
  stage: pre-build
  script:
    - echo "successfully installed dependencies"
  cache:
    <<: *cache-template
    policy: push
  rules:
    - changes:
        - .gitlab-ci.yml
        - yarn.lock
      when: always
    - when: never

build_gitlab_css:
  extends: [.node, .yarn_install]
  stage: pre-build
  script:
    - mkdir .build
    - git clone https://gitlab.com/gitlab-org/gitlab.git .build/gitlab --depth=1
    - yarn prebuild
    - yarn build-gitlab-css .build/gitlab > static/gitlab-normalized.css
  artifacts:
    when: always
    paths:
      - static/gitlab

danger-review:
  rules:
    - if: '$DANGER_GITLAB_API_TOKEN && $CI_MERGE_REQUEST_IID'
      when: always
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:danger
  stage: test
  needs: []
  script:
    - danger --fail-on-errors=true

build_package:
  extends: [.node, .yarn_install]
  variables:
    TAR_ARCHIVE_NAME: gitlab-ui.$CI_COMMIT_REF_SLUG.tgz
  needs: []
  stage: build
  script:
    - yarn build
    - yarn pack --filename $TAR_ARCHIVE_NAME
    - DEPENDENCY_URL="$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/$TAR_ARCHIVE_NAME"
    - echo "The package.json dependency URL is $DEPENDENCY_URL"
    - echo "DEPENDENCY_URL=$DEPENDENCY_URL" > build_package.env
  artifacts:
    when: always
    reports:
      dotenv: build_package.env
    paths:
      - dist
      - src/scss/utilities.scss
      - scss_to_js/scss_variables.*
      - $TAR_ARCHIVE_NAME

build_storybook:
  extends: [.node, .yarn_install]
  needs:
    - build_gitlab_css
  stage: build
  script:
    - GITLAB_CSS_LINK="/gitlab/gitlab.css" yarn storybook-static
    - mkdir public
    - mv storybook/* public
  artifacts:
    paths:
      - public

lint:
  extends: [.node, .yarn_install]
  needs: []
  stage: test
  script:
    - yarn build-scss-variables
    - yarn eslint
    - yarn prettier
    - yarn stylelint
    - >
      grep -r -i '<style' --include \*.vue components
      && echo "Vue components should not contain <style tags"
      && exit 1
      || echo "No Vue component contains <style tags"

generate_utility_classes:
  extends: [.node, '.yarn_install']
  needs: []
  stage: test
  script:
    - yarn generate-utilities

visual:
  extends: [.puppeteer, .yarn_install]
  needs:
    - build_docker_image
  stage: test
  script:
    - yarn test:visual
  artifacts:
    when: always
    paths:
      - tests/__image_snapshots__/

unit_tests:
  extends: [.node, .yarn_install]
  needs: []
  stage: test
  script:
    - yarn test:unit

update_screenshots:
  extends: [.puppeteer, .yarn_install]
  stage: manual
  when: manual
  script:
    - yarn test:visual:update
    - git config --global user.email "gitlab-bot@gitlab.com"
    - git config --global user.name "GitLab Bot"
    - git add .
    - "git commit -m 'chore: update snapshots'"
    - git push https://gitlab-bot:$GITLAB_TOKEN@gitlab.com/gitlab-org/gitlab-ui.git HEAD:$CI_COMMIT_REF_NAME &>/dev/null

review:
  rules:
    - <<: *if-mr-from-gitlab-ui
      when: always
  stage: deploy
  needs:
    - build_storybook
  script:
    - rsync -av --delete public /srv/nginx/pages/$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: http://$CI_COMMIT_REF_SLUG.$APPS_DOMAIN
    on_stop: review_stop
  tags:
    - nginx
    - review-apps
    - deploy

review_stop:
  rules:
    - <<: *if-mr-from-gitlab-ui
      when: manual
      allow_failure: true
  stage: manual
  needs:
    - review
  script:
    - rm -rf public /srv/nginx/pages/$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  tags:
    - nginx
    - review-apps
    - deploy

pages:
  stage: deploy
  needs:
    - build_storybook
  script:
    - echo "Deploying to Pages"
  artifacts:
    paths:
      - public
  only:
    - master@gitlab-org/gitlab-ui

create_integration_branch:
  rules:
    - <<: *if-mr-from-gitlab-ui
      when: manual
      allow_failure: true
  extends: .node
  stage: manual
  needs:
    - build_package
  script:
    - INTEGRATION_BRANCH="$CI_COMMIT_REF_NAME-gitlab-ui-integration-test"
    - git config --global user.email "gitlab-bot@gitlab.com"
    - git config --global user.name "GitLab Bot"
    - git clone https://gitlab.com/gitlab-org/gitlab.git gitlab --depth=1
    - cd gitlab
    - (git remote set-branches origin '*' && git fetch origin $INTEGRATION_BRANCH && git checkout $INTEGRATION_BRANCH) || git checkout -b $INTEGRATION_BRANCH
    - yarn add @gitlab/ui@$DEPENDENCY_URL
    - git add package.json yarn.lock
    - 'git commit -m "GitLab UI: $CI_COMMIT_REF_NAME integration test"'
    - git push -u https://gitlab-bot:$GITLAB_TOKEN@gitlab.com/gitlab-org/gitlab.git HEAD

publish_to_npm:
  extends: .semantic-release
  # We need to run `publish` after pages, so that pages will get deployed
  # properly, as the publish-to-npm step will create a new commit and this
  # could lead to a side-effect where pages don't get published because of
  # the commit being made before `pages` had a chance to run
  stage: publish
  # This job doesn't use the DAG feature, because we don't want it to
  # run in case another job in the previous stages fails
  dependencies:
    - build_package
  only:
    refs:
      - master@gitlab-org/gitlab-ui
